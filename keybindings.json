// Place your key bindings in this file to override the defaultsauto[]
[
  // for path intellisense windows bug
  { "key": ".", "command": "" },
  {
    "key": "shift+alt+enter",
    "command": "editor.emmet.action.wrapWithAbbreviation"
  },
  {
    "key": "ctrl+m ctrl+o",
    "command": "editor.emmet.action.balanceOut"
  },
  {
    "key": "ctrl+m ctrl+i",
    "command": "editor.emmet.action.balanceIn"
  },
  // add keybinding when it is in insert mode
  {
    "key": "ctrl+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": " editorTextFocus && vim.active  && !editorReadonly && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+alt+v",
    "command": "toggleVim"
  },
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+n",
    "command": "explorer.newFile",
    "when": "explorerViewletVisible"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "ctrl+shift+alt+f",
    "command": "workbench.action.focusActiveEditorGroup"
  },
  {
    "key": "ctrl+b",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+b",
    "command": "-markdown.extension.editing.toggleBold",
    "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
  },
  {
    "key": "ctrl+k alt+s",
    "command": "workbench.action.toggleAutoSave"
  },
  {
    "key": "ctrl+k ctrl+;",
    "command": "github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
  },
  {
    "key": "ctrl+enter",
    "command": "-github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
  },
  {
    "key": "ctrl+k ctrl+shift+k",
    "command": "github.copilot.toggleCopilot"
  },
  // Close Active Editor
  {
    "key": "ctrl+k k",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+k b",
    "command": "workbench.action.toggleAuxiliaryBar"
  },
  {
    "key": "ctrl+alt+b",
    "command": "-workbench.action.toggleAuxiliaryBar"
  },
  {
    "key": "/",
    "command": "workbench.panel.chat.view.copilot.focus",
    "when": "workbench.panel.chat.view.copilot.active && view.workbench.panel.chat.view.copilot.visible && workbench.panel.chat.view.copilot.canMove"
  },
  {
    "key": "ctrl+k ctrl+enter",
    "command": "workbench.action.splitEditorOrthogonal",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "-workbench.action.splitEditorOrthogonal"
  },
  {
    "key": "ctrl+enter",
    "command": "-github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused && !inInteractiveInput && !interactiveEditorFocused"
  }
]